generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

enum SubscriptionType {
    FOREVER
    HOURLY
    DAILY
    WEEKLY
    BIWEEKLY
    MONTHLY
    YEARLY
}

model User {
    id                      Int                      @id @default(autoincrement())
    email                   String                   @unique
    name                    String                   @db.VarChar(255)
    phone                   String?
    password                String?
    verificationCode        String?
    passwordResetCode       String?
    verified                Boolean                  @default(false)
    method                  String?
    googleId                String?
    profilePicture          String?                  @db.VarChar(1000)
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    session                 Session?
    ProtectionSetting       ProtectionSetting?
    AutomaticChargesSetting AutomaticChargesSetting?
    BusinessInfoSetting     BusinessInfoSetting?
    Subscription            Subscription?
    DigitalPayment          DigitalPayment?
    BankAccount             BankAccount?
    Transactions            Transaction[]
    FullPotential           FullPotential?

	order					Order[]

    @@map(name: "users")
}

model Session {
    id        Int      @id @default(autoincrement())
    valid     Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique

    @@map(name: "sessions")
}

model Appointment {
  id                String  			@id @unique @default(uuid())

  duration          Int
  published         Boolean  			@default(false)
  depositAmount     Float?     			@default(0)

  createdAt         DateTime 			@default(now())
  updatedAt         DateTime 			@updatedAt

  service           Service  			@relation(fields: [serviceId], references: [id])
  serviceId         String  			@unique

  @@map("appointments")
}

enum ServiceType {
	APPOINTMENT
	CLASS
}

enum PaymentType {
	IN_PERSON
	ONLINE
}

model Service {
  	id          String       		@id @unique @default(uuid())

  	name        String
  	description String?
  	location    String?	   			@default("To be determined")
  	price       Float
	paymentType PaymentType			@default(IN_PERSON)
	serviceType ServiceType

  	business	BusinessInfoSetting @relation(fields: [businessId],references: [id])
  	businessId	Int

  	appointment Appointment?
  	class		Class?

  	booking		Booking[]

  	@@map("services")
}

model ClassRepeat {
  	id          String   @id @unique @default(uuid())

	week 		Int
	monday 		Boolean  @default(false)
	tuesday 	Boolean  @default(false)
	wednesday 	Boolean  @default(false)
	thursday 	Boolean  @default(false)
	friday 		Boolean  @default(false)
	saturday 	Boolean  @default(false)
	sunday 		Boolean  @default(false)

	class		Class?

  	@@map("class_repeats")
}

model Class {
  id                		String   	@id @unique @default(uuid())

  maxNumberOfParticipants	Int
  duration          		Int?
  published         		Boolean?  	@default(false)
  startDateAndTime         	DateTime?
  endDate         			DateTime?

  createdAt         		DateTime? 	@default(now())
  updatedAt         		DateTime? 	@updatedAt

  service           		Service  	@relation(fields: [serviceId], references: [id])
  serviceId         		String   	@unique

  repeat           			ClassRepeat @relation(fields: [repeatId], references: [id])
  repeatId         			String  	@unique

  @@map("classes")
}

model Booking {
	id                		String   	@id @unique @default(uuid())

	bookingTime		        DateTime?

	service           		Service	@relation(fields: [serviceId], references: [id])
  	serviceId         		String

	bookingType				ServiceType

	note					String?		@default("")
	active					Boolean		@default(true)

  	createdAt         		DateTime? 	@default(now())
 	updatedAt         		DateTime? 	@updatedAt

	order 					Order?

  	@@map("bookings")
}

enum PaymentStatus {
	PAID
	UNPAID
	CANCELED
	REFUNDED
}


model Order {
	id            String   				@id @unique @default(uuid())

	booking	   	  Booking 				@relation(fields: [bookingId], references: [id])
  	bookingId     String  				@unique

	paymentStatus PaymentStatus			@default(UNPAID)

	createdAt	  DateTime? 			@default(now())
 	updatedAt     DateTime? 			@updatedAt

	client		  User					@relation(fields: [clientId], references: [id])
	clientId	  Int

  	business	  BusinessInfoSetting	@relation(fields: [businessId],references: [id])
  	businessId	  Int

  	@@map("orders")
}




model ProtectionSetting {
    id             Int      @id @default(autoincrement())
    activatePolicy Boolean  @default(false)
    time           String?
    toleranceDelay String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    user           User     @relation(fields: [userId], references: [id])
    userId         Int      @unique

    @@map(name: "protection_settings")
}

model AutomaticChargesSetting {
    id              Int      @id @default(autoincrement())
    eachAppointment Boolean  @default(false)
    eachPlan        Boolean  @default(false)
    frequency       String?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    user            User     @relation(fields: [userId], references: [id])
    userId          Int      @unique

    @@map(name: "automatic_charges_settings")
}

model BusinessInfoSetting {
    id            Int      @id @default(autoincrement())
    name          String?  @db.VarChar(255)
    description   String?
    link          String?
    address       String?
    logo          String?
    openHours     Json?
    calendar      String?
    interval      String?
    availability  String?
    advanceNotice String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    user          User     @relation(fields: [userId], references: [id])
    userId        Int      @unique

	service		  Service[]
	order		  Order[]

    @@map(name: "business_info_settings")
}

model DigitalPayment {
    id        Int      @id @default(autoincrement())
    verify    Boolean  @default(false)
    pix       Boolean  @default(false)
    megapay   Boolean  @default(false)
    payeer    Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique

    @@map(name: "digital_payments")
}

model BankAccount {
    id               Int      @id @default(autoincrement())
    beneficiary_name String
    account_number   String
    bank_name        String
    bank_code        String
    other            String?
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
    user             User     @relation(fields: [userId], references: [id])
    userId           Int      @unique

    @@map(name: "bank_accounts")
}

model Subscription {
    id                 Int               @id @default(autoincrement())
    billingDetails     String?
    billingAddress     String
    billingEmail       String
    isSubscribed       Boolean           @default(false)
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    user               User              @relation(fields: [userId], references: [id])
    userId             Int               @unique
    subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
    subscriptionPlanId Int?
    Transactions       Transaction[]

    @@map(name: "subscriptions")
}

model SubscriptionPlan {
    id               Int              @id @default(autoincrement())
    name             String
    tagLine          String
    amount           Float
    discountedAmount Float?
    subscriptionType SubscriptionType @default(MONTHLY)
    iconColor        String?
    isRecommended    Boolean?         @default(false)
    features         Json?
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt
    Subscriptions    Subscription[]
    Transactions     Transaction[]

    @@map(name: "subscription_plans")
}

model Transaction {
    id                 Int               @id @default(autoincrement())
    amount             Float?
    createdAt          DateTime          @default(now())
    updatedAt          DateTime          @updatedAt
    user               User              @relation(fields: [userId], references: [id])
    userId             Int
    subscription       Subscription?     @relation(fields: [subscriptionId], references: [id])
    subscriptionId     Int?
    subscriptionPlan   SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
    subscriptionPlanId Int?

    @@map(name: "transactions")
}

model FullPotential {
    id        Int      @id @default(autoincrement())
    data      Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    Int      @unique

    @@map(name: "full_potentials")
}

